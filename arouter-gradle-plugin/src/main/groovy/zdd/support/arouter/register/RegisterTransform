package zdd.support.arouter.register

import com.android.build.api.transform.*
import com.android.build.gradle.internal.pipeline.TransformManager
import org.apache.commons.codec.digest.DigestUtils
import org.apache.commons.io.FileUtils
import org.gradle.api.Project

class RegisterTransform extends Transform {

    Project project
    static ArrayList<ScanSetting> registerList
    static File fileContainsInitClass

    RegisterTransform(Project project) {
        this.project = project
    }

    @Override
    String getName() {
        return ScanSetting.PLUGIN_NAME
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return TransformManager.CONTENT_CLASS
    }

    @Override
    Set<? super QualifiedContent.Scope> getScopes() {
        return TransformManager.SCOPE_FULL_PROJECT
    }

    @Override
    boolean isIncremental() {
        return false
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
        Logger.i('Start scan register info in jar file.')
        long startTime = System.currentTimeMillis()
        boolean leftSlash = File.separator == '/'
        transformInvocation.inputs.each { input ->
            // 遍历jar
            input.jarInputs.each {
                String destName = jarInput.name
                // 重命名输出文件,因为可能同名,会覆盖
                def hexName = DigestUtils.md5Hex(it.file.absolutePath)
                if (destName.endsWith(".jar")) {
                    destName = destName.substring(0, destName.length() - 4)
                }
                // 输入的文件
                File src = it.file
                // output file 获得输出文件
                File dest = transformInvocation.outputProvider.getContentLocation(destName + "_" + hexName, it.contentTypes, it.scopes, Format.JAR)
                //scan jar file to find classes
                if (ScanUtils.shouldProcessPreDexJar(src.absolutePath)) {
                    ScanUtils.scanJar(src, dest)
                }
                //处理完后拷到目标文件
                FileUtils.copyFile(src, dest)
            }
            // 遍历目录
            input.directoryInputs.each {
                File dest = transformInvocation.outputProvider.getContentLocation(it.name, it.contentTypes, it.scopes, Format.DIRECTORY)
                String root = it.file.absolutePath
                if (!root.endsWith(File.separator)) {
                    root += File.separator
                }
                it.file.eachFileRecurse { file ->
                    def path = file.absolutePath.replace(root, '')
                    if (!leftSlash) {
                        path = path.replaceAll("\\\\", "/")
                    }
                    if (file.isFile() && ScanUtils.shouldProcessClass(path)) {
                        ScanUtils.scanClass(file)
                    }
                }
                // 处理完后拷到目标文件
                FileUtils.copyDirectory(it.file, dest)
            }
            Logger.i('Scan finish, current cost time ' + (System.currentTimeMillis() - startTime) + "ms")
            if (fileContainsInitClass) {
                registerList.each {
                    Logger.i('Insert register code to file ' + fileContainsInitClass.absolutePath)
                    if (it.classList.isEmpty()) {
                        Logger.e("No class implements found for interface:" + ext.interfaceName)
                    } else {
                        it.classList.each { name ->
                            Logger.i(name)
                        }
                        //generate register code into LogisticsCenter.class
                        RegisterCodeGenerator.insertInitCodeTo(it)
                    }
                }
            }
            Logger.i("Generate code finish, current cost time: " + (System.currentTimeMillis() - startTime) + "ms")
        }
    }
}